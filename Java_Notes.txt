https://docs.oracle.com/javase/tutorial/java/TOC.html

https://www.freecodecamp.org/news/the-java-handbook/

JVM = Java Virtual Machine. Java compliles into bytecodes. These files can be ran by he JVM on any OS, making the single application portable. 

JRE = Java Runtime Environment. Provides the libraries, components, and applets needed to run Java applications. Generally needed to run Java. 

JDK = Java development kit. Everything in JRE plug tools like compilers and debuggers for developers. 

Java SE (Standard Edition) Development Kit = from Oracle. 

OpenJDK = Opensource version of JDK vs the Oracle JDK version. 

JRE is a superset of JVM
JDK is a superset of JRE

##########################################

Basic Hello World: 
class Main{
    public static void main(String[] args){
        // Code goes here
        System.out.println("Hello World!");
    }
}

Java Source file ".java" can contain only one top level public class in it. 

Top level public class must be named the same as the file. class Main == Main.java

.java file is source, once compiled turns into .class 
This is bytecode that is then ran by the Java Virtual Machine. 

For every class you have within your codebase,the compiler will create a separate bytecode ".class" file. 

Main function in Java:
public static void main (Stringp[] args)

public = accesable in entire codebase
static = you can call it without instantiating its class
void = the function doesnt return any value
String[] args = the function takes an array of strings as an argument. (from files, or system in)


#########################################

Object-oriented Programming

Object = State + Behavior

State = "Field" (Sometimes variables in other languages)
Behavior = "Methods" (Sometimes functions in other languages)

"An object stores its state in FIELDS and exposes its behavior through METHODS.

Methods operate on an objects internal state and are primary method of Object to Object communication. 

Data Encapsulation = Hiding internal state and requiring all interaction performed through an objects method. 

Class = Blueprint for individual objects. Groups together a bunch of related code. 
Object = an INSTANCE of a CLASS of objects. 

Class does not have a "Main" method and is not a full application, but it can be called by other applications. 

Creating a Class:
class nameOfClass {
    // Define State of object

    // Define Methods
}

A subclass is used when fields from one class can be reused but need additional information. Subclass focuses on the features that make it unique from the superclass. 

A subclass can have one direct superclass, but a superclass can have unlimited subclasses. 

Creating a subclass:
class nameOfSubClass extends class {

}


Creating an Interface: 
Methods form the objects INTERFACE with the outside world. 

Most common form of interface is a group of related methods with empty bodies. 

interface nameOfInterface {
    // void <method name from class>
}

to implement interface: 

public class nameOfnewClass implements nameOfClass{
    // Adding "public" allows this interace to be used anywhere in the codebase.  
} 

Usuing a Class:

class demoApp {
    
    // Create objects
    nameOfClass newObject = new nameOfClass();

    // Invoke methods on those objects

    newObject.method1(50);
    newObject.method2(2);
    
}


################################################

variables

// <type> <name> ;
This declares the variable, but does not initialize it. 

// <name> = <value>;

You cannot use uninitialized variable in Java. 

You cannot declare the same variable twice. 

Naming Conventions: 
Start variable name with small letter and not special character (_, $)
Use camel case if multiple words. (firstName, lastName)
Dont use sincle letters
Make them logical descriptions of their use. 

A "final" variable can be initialized only once, and cannot reassign it. 
// final <type> <name> = <value> 
// final <type> <name> 
    <name> = <value>

Two types of data in Java. 
"Primitive types" and "non-primitive" or "reference types" 

Primitive types store values. 

Reference type stores the reference to a memory location where a dynamic object is being stored. 

There are primitive data types in Java: 
byte 	8-bit signed integer within the range of -128 to 127
Primitive data types store values.

short 	16-bit signed integer within the range of -32,768 to 32,767

int 	32-bit signed integer within the range of -2147483648 to 2147483647

long 	64-bit signed integer within the range of -9223372036854775808 to 9223372036854775807

float 	single-precision 32-bit floating point within the range of 1.4E-45 to 3.4028235E38

double 	double-precision 64-bit floating point within the range of 4.9E-324 to 1.7976931348623157E308

boolean 	It can be either true or false

char 	single 16-bit Unicode character within the range of \u0000 (or 0) to \uffff (or 65,535 inclusive)

float nees to have f appended to value, otherwise every decible number is treated as a double. 
Doubles always have a decimal point. int is whole numbers
Boolean data hold either true or false. 
char type can holde Unicode characters

int, double, boolean, char are used most often. 

Typecasting: 
